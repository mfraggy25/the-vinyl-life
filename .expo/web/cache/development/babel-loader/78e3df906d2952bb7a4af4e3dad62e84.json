{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Michael.Fragiskatos\\\\desktop\\\\coding\\\\the-vinyl-life\\\\Screen\\\\LoginScreen.js\";\n\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport Loader from \"./Components/loader\";\n\nvar LoginScreen = function LoginScreen(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      userEmail = _useState2[0],\n      setUserEmail = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userPassword = _useState4[0],\n      setUserPassword = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      errortext = _useState8[0],\n      setErrortext = _useState8[1];\n\n  var handleSubmitPress = function handleSubmitPress() {\n    setErrortext(\"\");\n\n    if (!userEmail) {\n      alert(\"Please fill Email\");\n      return;\n    }\n\n    if (!userPassword) {\n      alert(\"Please fill Password\");\n      return;\n    }\n\n    setLoading(true);\n    var dataToSend = {\n      user_email: userEmail,\n      user_password: userPassword\n    };\n    var formBody = [];\n\n    for (var key in dataToSend) {\n      var encodedKey = encodeURIComponent(key);\n      var encodedValue = encodeURIComponent(dataToSend[key]);\n      formBody.push(encodedKey + \"=\" + encodedValue);\n    }\n\n    formBody = formBody.join(\"&\");\n    fetch(\"https://aboutreact.herokuapp.com/login.php\", {\n      method: \"POST\",\n      body: formBody,\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\"\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (responseJson) {\n      setLoading(false);\n      console.log(responseJson);\n\n      if (responseJson.status == 1) {\n        AsyncStorage.setItem(\"user_id\", responseJson.data[0].user_id);\n        console.log(responseJson.data[0].user_id);\n        props.navigation.navigate(\"DrawerNavigationRoutes\");\n      } else {\n        setErrortext(\"Please check your email id or password\");\n        console.log(\"Please check your email id or password\");\n      }\n    }).catch(function (error) {\n      setLoading(false);\n      console.error(error);\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.mainBody,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, React.createElement(Loader, {\n    loading: loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), React.createElement(ScrollView, {\n    keyboardShouldPersistTaps: \"handled\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      marginTop: 100\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, React.createElement(KeyboardAvoidingView, {\n    enabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    style: {\n      alignItems: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, React.createElement(Image, {\n    style: {\n      width: \"50%\",\n      height: 100,\n      resizeMode: \"contain\",\n      margin: 30\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(UserEmail) {\n      return setUserEmail(UserEmail);\n    },\n    underlineColorAndroid: \"#FFFFFF\",\n    placeholder: \"Enter Email\",\n    placeholderTextColor: \"#F6F6F7\",\n    autoCapitalize: \"none\",\n    keyboardType: \"email-address\",\n    ref: function ref(_ref) {\n      _this._emailinput = _ref;\n    },\n    returnKeyType: \"next\",\n    onSubmitEditing: function onSubmitEditing() {\n      return _this._passwordinput && _this._passwordinput.focus();\n    },\n    blurOnSubmit: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(UserPassword) {\n      return setUserPassword(UserPassword);\n    },\n    underlineColorAndroid: \"#FFFFFF\",\n    placeholder: \"Enter Password\",\n    placeholderTextColor: \"#F6F6F7\",\n    keyboardType: \"default\",\n    ref: function ref(_ref2) {\n      _this._passwordinput = _ref2;\n    },\n    onSubmitEditing: Keyboard.dismiss,\n    blurOnSubmit: false,\n    secureTextEntry: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  })), errortext != \"\" ? React.createElement(Text, {\n    style: styles.errorTextStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 15\n    }\n  }, \" \", errortext, \" \") : null, React.createElement(TouchableOpacity, {\n    style: styles.buttonStyle,\n    activeOpacity: 0.5,\n    onPress: handleSubmitPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonTextStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 15\n    }\n  }, \"LOGIN\")), React.createElement(Text, {\n    style: styles.registerTextStyle,\n    onPress: function onPress() {\n      return props.navigation.navigate(\"RegisterScreen\");\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, \"New Here ? Register\")))));\n};\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  mainBody: {\n    flex: 1,\n    justifyContent: \"center\",\n    backgroundColor: \"#307ecc\"\n  },\n  SectionStyle: {\n    flexDirection: \"row\",\n    height: 40,\n    marginTop: 20,\n    marginLeft: 35,\n    marginRight: 35,\n    margin: 10\n  },\n  buttonStyle: {\n    backgroundColor: \"#7DE24E\",\n    borderWidth: 0,\n    color: \"#FFFFFF\",\n    borderColor: \"#7DE24E\",\n    height: 40,\n    alignItems: \"center\",\n    borderRadius: 30,\n    marginLeft: 35,\n    marginRight: 35,\n    marginTop: 20,\n    marginBottom: 20\n  },\n  buttonTextStyle: {\n    color: \"#FFFFFF\",\n    paddingVertical: 10,\n    fontSize: 16\n  },\n  inputStyle: {\n    flex: 1,\n    color: \"white\",\n    paddingLeft: 15,\n    paddingRight: 15,\n    borderWidth: 1,\n    borderRadius: 30,\n    borderColor: \"white\"\n  },\n  registerTextStyle: {\n    color: \"#FFFFFF\",\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    fontSize: 14\n  },\n  errorTextStyle: {\n    color: \"red\",\n    textAlign: \"center\",\n    fontSize: 14\n  }\n});","map":{"version":3,"sources":["C:/Users/Michael.Fragiskatos/desktop/coding/the-vinyl-life/Screen/LoginScreen.js"],"names":["React","useState","AsyncStorage","Loader","LoginScreen","props","userEmail","setUserEmail","userPassword","setUserPassword","loading","setLoading","errortext","setErrortext","handleSubmitPress","alert","dataToSend","user_email","user_password","formBody","key","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","body","headers","then","response","json","responseJson","console","log","status","setItem","data","user_id","navigation","navigate","catch","error","styles","mainBody","marginTop","alignItems","width","height","resizeMode","margin","SectionStyle","inputStyle","UserEmail","ref","_emailinput","_passwordinput","focus","UserPassword","Keyboard","dismiss","errorTextStyle","buttonStyle","buttonTextStyle","registerTextStyle","StyleSheet","create","flex","justifyContent","backgroundColor","flexDirection","marginLeft","marginRight","borderWidth","color","borderColor","borderRadius","marginBottom","paddingVertical","fontSize","paddingLeft","paddingRight","textAlign","fontWeight"],"mappings":"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","sourcesContent":["//Import React and Hook we needed\r\nimport React, { useState } from \"react\";\r\n\r\n//Import all required component\r\nimport {\r\n  StyleSheet,\r\n  TextInput,\r\n  View,\r\n  Text,\r\n  ScrollView,\r\n  Image,\r\n  Keyboard,\r\n  TouchableOpacity,\r\n  KeyboardAvoidingView,\r\n} from \"react-native\";\r\nimport AsyncStorage from \"@react-native-community/async-storage\";\r\nimport Loader from \"./Components/loader\";\r\n\r\nconst LoginScreen = (props) => {\r\n  let [userEmail, setUserEmail] = useState(\"\");\r\n  let [userPassword, setUserPassword] = useState(\"\");\r\n  let [loading, setLoading] = useState(false);\r\n  let [errortext, setErrortext] = useState(\"\");\r\n\r\n  const handleSubmitPress = () => {\r\n    setErrortext(\"\");\r\n    if (!userEmail) {\r\n      alert(\"Please fill Email\");\r\n      return;\r\n    }\r\n    if (!userPassword) {\r\n      alert(\"Please fill Password\");\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    var dataToSend = { user_email: userEmail, user_password: userPassword };\r\n    var formBody = [];\r\n    for (var key in dataToSend) {\r\n      var encodedKey = encodeURIComponent(key);\r\n      var encodedValue = encodeURIComponent(dataToSend[key]);\r\n      formBody.push(encodedKey + \"=\" + encodedValue);\r\n    }\r\n    formBody = formBody.join(\"&\");\r\n\r\n    fetch(\"https://aboutreact.herokuapp.com/login.php\", {\r\n      method: \"POST\",\r\n      body: formBody,\r\n      headers: {\r\n        //Header Defination\r\n        \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((responseJson) => {\r\n        //Hide Loader\r\n        setLoading(false);\r\n        console.log(responseJson);\r\n        // If server response message same as Data Matched\r\n        if (responseJson.status == 1) {\r\n          AsyncStorage.setItem(\"user_id\", responseJson.data[0].user_id);\r\n          console.log(responseJson.data[0].user_id);\r\n          props.navigation.navigate(\"DrawerNavigationRoutes\");\r\n        } else {\r\n          setErrortext(\"Please check your email id or password\");\r\n          console.log(\"Please check your email id or password\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //Hide Loader\r\n        setLoading(false);\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.mainBody}>\r\n      <Loader loading={loading} />\r\n      <ScrollView keyboardShouldPersistTaps=\"handled\">\r\n        <View style={{ marginTop: 100 }}>\r\n          <KeyboardAvoidingView enabled>\r\n            <View style={{ alignItems: \"center\" }}>\r\n              <Image\r\n                // source={require(\"../Image/aboutreact.png\")}\r\n                style={{\r\n                  width: \"50%\",\r\n                  height: 100,\r\n                  resizeMode: \"contain\",\r\n                  margin: 30,\r\n                }}\r\n              />\r\n            </View>\r\n            <View style={styles.SectionStyle}>\r\n              <TextInput\r\n                style={styles.inputStyle}\r\n                onChangeText={(UserEmail) => setUserEmail(UserEmail)}\r\n                underlineColorAndroid=\"#FFFFFF\"\r\n                placeholder=\"Enter Email\" //dummy@abc.com\r\n                placeholderTextColor=\"#F6F6F7\"\r\n                autoCapitalize=\"none\"\r\n                keyboardType=\"email-address\"\r\n                ref={(ref) => {\r\n                  this._emailinput = ref;\r\n                }}\r\n                returnKeyType=\"next\"\r\n                onSubmitEditing={() =>\r\n                  this._passwordinput && this._passwordinput.focus()\r\n                }\r\n                blurOnSubmit={false}\r\n              />\r\n            </View>\r\n            <View style={styles.SectionStyle}>\r\n              <TextInput\r\n                style={styles.inputStyle}\r\n                onChangeText={(UserPassword) => setUserPassword(UserPassword)}\r\n                underlineColorAndroid=\"#FFFFFF\"\r\n                placeholder=\"Enter Password\" //12345\r\n                placeholderTextColor=\"#F6F6F7\"\r\n                keyboardType=\"default\"\r\n                ref={(ref) => {\r\n                  this._passwordinput = ref;\r\n                }}\r\n                onSubmitEditing={Keyboard.dismiss}\r\n                blurOnSubmit={false}\r\n                secureTextEntry={true}\r\n              />\r\n            </View>\r\n            {errortext != \"\" ? (\r\n              <Text style={styles.errorTextStyle}> {errortext} </Text>\r\n            ) : null}\r\n            <TouchableOpacity\r\n              style={styles.buttonStyle}\r\n              activeOpacity={0.5}\r\n              onPress={handleSubmitPress}\r\n            >\r\n              <Text style={styles.buttonTextStyle}>LOGIN</Text>\r\n            </TouchableOpacity>\r\n            <Text\r\n              style={styles.registerTextStyle}\r\n              onPress={() => props.navigation.navigate(\"RegisterScreen\")}\r\n            >\r\n              New Here ? Register\r\n            </Text>\r\n          </KeyboardAvoidingView>\r\n        </View>\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\nexport default LoginScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  mainBody: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"#307ecc\",\r\n  },\r\n  SectionStyle: {\r\n    flexDirection: \"row\",\r\n    height: 40,\r\n    marginTop: 20,\r\n    marginLeft: 35,\r\n    marginRight: 35,\r\n    margin: 10,\r\n  },\r\n  buttonStyle: {\r\n    backgroundColor: \"#7DE24E\",\r\n    borderWidth: 0,\r\n    color: \"#FFFFFF\",\r\n    borderColor: \"#7DE24E\",\r\n    height: 40,\r\n    alignItems: \"center\",\r\n    borderRadius: 30,\r\n    marginLeft: 35,\r\n    marginRight: 35,\r\n    marginTop: 20,\r\n    marginBottom: 20,\r\n  },\r\n  buttonTextStyle: {\r\n    color: \"#FFFFFF\",\r\n    paddingVertical: 10,\r\n    fontSize: 16,\r\n  },\r\n  inputStyle: {\r\n    flex: 1,\r\n    color: \"white\",\r\n    paddingLeft: 15,\r\n    paddingRight: 15,\r\n    borderWidth: 1,\r\n    borderRadius: 30,\r\n    borderColor: \"white\",\r\n  },\r\n  registerTextStyle: {\r\n    color: \"#FFFFFF\",\r\n    textAlign: \"center\",\r\n    fontWeight: \"bold\",\r\n    fontSize: 14,\r\n  },\r\n  errorTextStyle: {\r\n    color: \"red\",\r\n    textAlign: \"center\",\r\n    fontSize: 14,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}